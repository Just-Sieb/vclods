#! /bin/ksh
# Executes a VCLOD script (Variable Config, Locking, Operation, and Destination) with all
# the setup that entails. See the README for an overview of VCLODs.
#
# Usage:
# ./vclod_run_script /path/to/script

# Argument validation -- Continued later
[ -z "$VCLOD_BASE_DIR" ] && . "$(dirname $(readlink -f $(which $0)))/vclod_loadenv"
: ${VCLOD_BASE_DIR:?} ${VCLOD_FORCE_SETUP_SQL:=0} ${1:?The full path of a file to process is a required positional argument}
[ -s "$1" ] || { echo >&2 The positional argument must be a non-empty file; exit 1; }

# respect local config file
[ -f "`dirname $1`/config" ] && . "`dirname $1`/config"

. "${VCLOD_BASE_DIR%/}/vclod_get_semaphore"
. "${VCLOD_BASE_DIR%/}/vclod_stdio2log"

# Connection parameters are required, but can be set either in the env or the current directory's config file
: ${DEBUG_SHOULD_TIME_IT:=0}
if [[ $1 =~ .*\.sql(\..*)? || $VCLOD_FORCE_SETUP_SQL != 0 ]]; then
  case "${VCLOD_ENGINE:=mysql}" in
    mysql) 
      VCLOD_HOST=${VCLOD_MYSQL_HOST:=${VCLOD_HOST:?}}
      VCLOD_USER=${VCLOD_MYSQL_USER:=${VCLOD_USER:?}}
      VCLOD_PASSWORD=${VCLOD_MYSQL_PASSWORD:=${VCLOD_PASSWORD:?}}
      VCLOD_DB=${VCLOD_MYSQL_DB:=${VCLOD_DB:?}}
      export SRC="mysql -h${VCLOD_HOST} -u${VCLOD_USER} -p${VCLOD_PASSWORD} -BNArc ${VCLOD_DB}" ;;
    mssql) 
      VCLOD_HOST=${VCLOD_MSSQL_HOST:=${VCLOD_HOST:?}}
      VCLOD_USER=${VCLOD_MSSQL_USER:=${VCLOD_USER:?}}
      VCLOD_PASSWORD=${VCLOD_MSSQL_PASSWORD:=${VCLOD_PASSWORD:?}}
      VCLOD_DB=${VCLOD_MSSQL_DB:=${VCLOD_DB:?}}
      export SRC="eval sqlcmd -h-1 -W -S${VCLOD_HOST} -U${VCLOD_USER} -P${VCLOD_PASSWORD} -d${VCLOD_DB} | egrep -v '[(][0-9]+ rows affected[])]'" ;;
    # IMPROVE: add a postgres ENGINE
    *) echo >&2 "Unknown engine type $VCLOD_ENGINE" ; exit 1 ;;
  esac
else 
  SRC='eval : ${VCLOD_FORCE_SETUP_SQL:?required to use SRC if .sql is not in the extension path}'
fi
if [[ $1 =~ .*\.dst(\..*)? || $VCLOD_FORCE_SETUP_SQL != 0 ]]; then
  case "${VCLOD_DST_ENGINE:=mysql}" in
    mysql)
      : ${VCLOD_DST_HOST:=${VCLOD_MYSQL_HOST:-${VCLOD_HOST:?}}}
      : ${VCLOD_DST_USER:=${VCLOD_MYSQL_USER:-${VCLOD_USER:?}}}
      : ${VCLOD_DST_PASSWORD:=${VCLOD_MYSQL_PASSWORD:-${VCLOD_PASSWORD:?}}}
      : ${VCLOD_DST_DB:=${VCLOD_MYSQL_DB:-${VCLOD_DB:?}}}
      export DST="mysql -h$VCLOD_DST_HOST -u$VCLOD_DST_USER -p$VCLOD_DST_PASSWORD -BNArc $VCLOD_DST_DB" ;;
    mssql)
      : ${VCLOD_DST_HOST:=${VCLOD_MSSQL_HOST:-${VCLOD_HOST:?}}}
      : ${VCLOD_DST_USER:=${VCLOD_MSSQL_USER:-${VCLOD_USER:?}}}
      : ${VCLOD_DST_PASSWORD:=${VCLOD_MSSQL_PASSWORD:-${VCLOD_PASSWORD:?}}}
      : ${VCLOD_DST_DB:=${VCLOD_MSSQL_DB:-${VCLOD_DB:?}}}
      export SRC="eval sqlcmd -h-1 -W -S${VCLOD_DST_HOST} -U${VCLOD_DST_USER} -P${VCLOD_DST_PASSWORD} -d${VCLOD_DST_DB} | egrep -v '[(][0-9]+ rows affected[])]'" ;;
    # IMPROVE: add a postgres ENGINE
    *) echo >&2 "Unknown destination engine type $VCLOD_DST_ENGINE" ; exit 1 ;;
  esac
else
  DST='eval : ${VCLOD_FORCE_SETUP_SQL:?required to use DST if .dst is not in the extension path}'
fi

export INPUT_DIR="$(dirname $1)"

operation(){
  next="${1%.*}"
  [[ "$1" == "$next" ]] && cat && return # the cat connects stdin to stdout, note that the error case below does not.
  extension="${1##*.}"
  ext="${extension%%-*}"
  ext_opt="$([ $extension = $ext ] || echo ${extension#*-})"
  base_filename="${1%%.*}"
  op_ext_file="${VCLOD_BASE_DIR%/}/extensions/$ext"
  test -f $op_ext_file || { echo "Unknown file type $ext" >&2 ; exit 99 ; }
  . $op_ext_file | operation $next
}

ret=0
[ $DEBUG_SHOULD_TIME_IT == 1 ] && echo "[START] $@"
cat $1 | operation $(basename $1) || { ret=$?; echo >&2 "`basename $1` returned $ret"; }
[ $DEBUG_SHOULD_TIME_IT == 1 ] && echo "[FINISH] $@ returned $ret"
exit $ret
